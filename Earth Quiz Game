'''Quiz Game with 10 multi-choice questions that displays whether the answer was right or wrong
 and shows total right answers on the final screen, with the option to play again
                                                                       Ella Wilce July 2025 '''

# Import tkinter to use GUI and random to shuffle answer placement
from tkinter import *
import random
   
# Create root window 
root = Tk()
root.geometry("1200x800")
root.title("Background Colour Change")

# Import background images
home = PhotoImage(file=r"Earth Homescreen (1200 x 800 px) (1).png")
bg_image = Label(root, image = home)
bg_image.place(relheight = 1, relwidth = 1)
right_bg = PhotoImage(file = r"Correct .png")
wrong_bg = PhotoImage(file = r"Wrong .png")
rules_image= PhotoImage(file=r"RULES (1).png")

q_ozone = PhotoImage(file = r"Question Screen ozone(1200 x 800 px).png")
q_g_gas = PhotoImage(file = r"Question Screen g-gas(1200 x 800 px).png")
q_algae = PhotoImage(file = r"Question Screen algae(1200 x 800 px).png")
q_soil = PhotoImage(file = r"Question Screen soil erosion(1200 x 800 px).png")
q_forest = PhotoImage(file = r"Question Screen deforestation(1200 x 800 px).png")
q_develop = PhotoImage(file = r"Question Screen sustainable development(1200 x 800 px).png")
q_energy = PhotoImage(file = r"Question Screen renewable energy(1200 x 800 px).png")
q_bio = PhotoImage(file = r"Question Screen biodiversity(1200 x 800 px).png")
q_sealife = PhotoImage(file = r"Question Screen sea pollution(1200 x 800 px).png")
q_water = PhotoImage(file = r"Question Screen groundwater(1200 x 800 px).png")

# Set the values for the x and y positions of the four answer option buttons
x_pos1 = 80
x_pos2 = 420

y_pos1 = 400
y_pos2 = 600

# Function to streamline the questions. Establishes everything except root, text, command
def answer_options(root, text, command_func):
    question_button = Button(
        root,
        text=text,
        bg = "white",
        width=20,
        font = ("Hobo std",20,'normal'),
        height=3,
        command=command_func)
    return question_button

# List of all the questions
def question_1():

    y_list = []
    x_list = []
    q_list = []
    bg_image = Label(root, image = q_ozone)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Industrial pollutants \n like CFCs", right_answer))
    q_list.append(answer_options(root, "Increased \n solar radiation", wrong_answer))
    q_list.append(answer_options(root, "Natural variations \n in atmospheric gases", wrong_answer))
    q_list.append(answer_options(root, "Deforestation", wrong_answer))

# Answers are placed in a random position
    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_2():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_g_gas)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Carbon Dioxide", right_answer))
    q_list.append(answer_options(root, "Nitrogen", wrong_answer))
    q_list.append(answer_options(root,"Oxygen", wrong_answer))
    q_list.append(answer_options(root, "Helium", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_3():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_algae)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Eutrophication", right_answer))
    q_list.append(answer_options(root, "Hypernutrification", wrong_answer))
    q_list.append(answer_options(root,"Acidification", wrong_answer))
    q_list.append(answer_options(root, "Desertification", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_4():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_soil)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Overgrazing", right_answer))
    q_list.append(answer_options(root, "Afforestation", wrong_answer))
    q_list.append(answer_options(root,"Excess water", wrong_answer))
    q_list.append(answer_options(root, "Crop Rotation", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_5():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_forest)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Increased Water \n Cycle disruptions", right_answer))
    q_list.append(answer_options(root, "Increased Carbon \n Sequestration", wrong_answer))
    q_list.append(answer_options(root, "Increased Biodiversity", wrong_answer))
    q_list.append(answer_options(root, "Increased greenhouse \n gas emissions", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_6():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_develop)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Meeting the needs of the \n present without compromising \n future generations", right_answer))
    q_list.append(answer_options(root, "Focusing solely on \n economic growth", wrong_answer))
    q_list.append(answer_options(root, "Ignoring \n environmental concerns", wrong_answer))
    q_list.append(answer_options(root, "Prioritizing short-term \n gains over long-term \n sustainability", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])
  
def question_7():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_energy)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Solar", right_answer))
    q_list.append(answer_options(root, "Coal", wrong_answer))
    q_list.append(answer_options(root, "Oil", wrong_answer))
    q_list.append(answer_options(root, "Natural Gas", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_8():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_bio)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Species extinction", right_answer))
    q_list.append(answer_options(root, "Genetic diversity", wrong_answer))
    q_list.append(answer_options(root, "Habitat fragmentation", wrong_answer))
    q_list.append(answer_options(root, "Natural selection", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_9():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_sealife)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Increased ingestion \n and entanglement", right_answer))
    q_list.append(answer_options(root, "Reduced plastic waste", wrong_answer))
    q_list.append(answer_options(root, "Increased oxygen \n levels", wrong_answer))
    q_list.append(answer_options(root, "Increased marine \n bird populations", wrong_answer))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

def question_10():
    x_list = []
    y_list= []
    q_list = []
    bg_image = Label(root, image = q_water)
    bg_image.place(relheight = 1, relwidth = 1)
    q_list.append(answer_options(root, "Infiltration", finish_right))
    q_list.append(answer_options(root, "Evaporation", finish))
    q_list.append(answer_options(root, "Runoff", finish))
    q_list.append(answer_options(root, "Transpiration", finish))

    gridpositions = [(x_pos1,y_pos1), (x_pos1,y_pos2),(x_pos2,y_pos1),(x_pos2,y_pos2)]
    random.shuffle(gridpositions)
  
    for i in range (4):
        position = gridpositions[i]
        x_list.append(position[0])
        y_list.append(position[1]) 
    for i in range(4):
        q_list[i].place(x= x_list[i], y= y_list[i])

# If right answer is selected display a 'right' screen with a button to continue to the next question
def right_answer():
    bg_image = Label(root, image = right_bg)
    bg_image.place(relheight = 1, relwidth = 1)
    global question_num
    question_num += 1 
    global right_answers
    right_answers += 1
    continue_button = Button(root, text = "Next Question", font = ("Hobo std",30,'bold')
                      , bg = "white", command = questions_list[question_num])
                                      
    continue_button.configure(height = 1, width = 20)
    continue_button.place(x=200, y = 600)

# If wrong answer is selected display a 'wrong' screen with a button to continue to the next question
def wrong_answer():
    bg_image = Label(root, image = wrong_bg)
    bg_image.place(relheight = 1, relwidth = 1)
    global question_num
    question_num +=1
    continue_button = Button(root, text = "Next Question", font = ("Hobo std",30,'bold')
                      , bg = "white", command = questions_list[question_num])
    continue_button.configure(height = 1, width = 20)
    continue_button.place(x=200, y = 600)

# If Question 10 is right, add 1 to right_answers before finishing 
def finish_right():
    global right_answers 
    right_answers += 1
    finish()

# Display score on the final page with a button to play again
def finish():
    global questions_list, question_num, right_answers
    bg_image = Label(root, image = home, text = f'You scored\n {right_answers} out of 10!!!',font = ("Hobo std",70,'bold'), bg = "white" )
    bg_image.place(relheight = 1, relwidth = 1)
    bg_image.config(compound = "center")
    play_button = Button(root, text = " Play Again ", font = ("Hobo std",30,'bold')
                      , bg = "lightgreen", command = play_clicked)
    play_button.configure(height = 1, width = 8,)
    play_button.place(x = 500, y = 500)
    exit_button = Button(root, text = " Exit ", font = ("Hobo std",30,'bold')
                      , bg = "lightgreen", command = root.destroy)
    exit_button.configure(height = 1, width = 8,)
    exit_button.place(x = 500, y = 600)

    # Reset all variables
    questions_list = [question_1, question_2, question_3, question_4, question_5, question_6, question_7, question_8, question_9, question_10]
    right_answers = 0
    question_num = 0     
  
# After play has been clicked show rules and continue button to start the quiz
def play_clicked():
    bg_image = Label(root, image = rules_image)
    bg_image.place(relheight = 1, relwidth = 1)
    continue_button = Button(root, text = "Continue to Quiz", font = ("Hobo std",30,'bold')
                      , bg = "white", command = question_1)
    continue_button.configure(height = 1, width = 20)
    continue_button.place(x=250, y = 650)

# Home Screen with button to 'play now'
play_button = Button(root, text = "Play Now", font = ("Hobo std",30,'bold')
                      , bg = "lightgreen", command = play_clicked)
play_button.configure(height = 1, width = 8,)
play_button.place(x = 500, y = 400)

# List of Questions to cycle through. Variable for total right answers and variable to move on to the next question
questions_list = [question_1, question_2, question_3, question_4, question_5, question_6, question_7, question_8, question_9, question_10]
right_answers = 0
question_num = 0

root.mainloop()




